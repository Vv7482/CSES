#include <bits/stdc++.h>
using namespace std;
#define int long long

bool DFS(int i , vector<vector<int>> &adj , vector<int> &vis , stack<int> &st , int &start){
	if(vis[i] == 1){start = i;return true;}
	if(vis[i] == 2){return false;}
	vis[i] = 1;
	st.push(i);
	for(auto e:adj[i]){
		if(!vis[e]){
			if(DFS(e,adj,vis,st,start)){
				return true;
			}
		}else if(vis[e] == 1) {
            start = e;
            return true;
        }
	}
	st.pop();
	vis[i] = 2;

	return false;
}

void solve() {
	int n,m;
	cin>>n>>m;
	vector<vector<int>> adj(n+1);
	for(int i=0 ; i<m ; i++){
		int a,b;
		cin>>a>>b;
		adj[a].push_back(b);
	}

	stack<int> st;
	vector<int> vis(n+1 , 0);
	for(int i=1 ; i<=n ; i++){
		if(!vis[i]){
			int start=0;
			if(DFS(i,adj,vis,st,start)){
				vector<int> ans;
				int curr=-1;
				while(curr != start){
					curr = st.top();
					ans.push_back(curr);
					st.pop();
				}
				reverse(ans.begin() , ans.end());
				ans.push_back(ans[0]);
				int len = ans.size();
				cout<<len<<'\n';
				for(int i=0 ; i<len ; i++){
					cout<<ans[i]<<' ';
				}
				return;
			}
		}
	}

	

	cout<< "IMPOSSIBLE" << '\n';
	return;
}
 
signed main() {
    	ios_base::sync_with_stdio(0);
    	cin.tie(0);
    	cout.tie(0);
 
    	solve();
}
