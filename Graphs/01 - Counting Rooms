#include <bits/stdc++.h>
using namespace std;
#define int long long
 
void BFS(int i , int j , int m , int n , vector<vector<char>> &mat , vector<vector<int>> &vis){
	queue<pair<int,int>> q;
	q.push({i,j});
	
	while(!q.empty()){
	    int row = q.front().first;
	    int col = q.front().second;
	    vis[row][col] = 1;
		q.pop();
		int x[] = {-1,0,1,0};
		int y[] = {0,1,0,-1};
		for(int i=0 ; i<4 ; i++){
			int n_row = row + x[i] , n_col = col + y[i];
			if(n_row>=0 && n_row<m && n_col>=0 && n_col<n && vis[n_row][n_col] == -1 && mat[n_row][n_col] == '.'){
				q.push({n_row , n_col});
				vis[n_row][n_col] = 1;
			}
		}
	}
	return;
}
 
	
 
 
void solve() {
	int m,n;
	cin >> m >> n;
	vector<vector<char>> mat(m,vector<char>(n));
	for(int i=0 ; i<m ; i++){
		for(int j=0 ; j<n ; j++){
			cin>>mat[i][j];
		}
	}
	
	vector<vector<int>> vis(m , vector<int>(n,-1));
	int ans=0;
	
	for(int i=0 ; i<m ; i++){
		for(int j=0 ; j<n ; j++){
			if(mat[i][j] == '.' && vis[i][j] == -1){
				BFS(i,j,m,n,mat,vis);
				ans++;
			}
		}
	}
	cout<<ans<<'\n';	
}
 
signed main() {
    	ios_base::sync_with_stdio(0);
    	cin.tie(0);
    	cout.tie(0);
 
    	solve();
}
