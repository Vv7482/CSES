//  floyd warshall Algorithm
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int INF = 1e16;
typedef pair<int,int> pii;

void solve() {
	int n,m,q;
	cin>>n>>m>>q;
	vector<vector<pair<int,int>>> adj(n+1);
	vector<vector<int>> dist(n+1,vector<int>(n+1,INF));

	for(int i=0 ; i<m ; i++){
		int a,b,c;
		cin>>a>>b>>c;
		adj[a].push_back({b,c});
		dist[a][b] = min(dist[a][b], c); 
    dist[b][a] = min(dist[b][a], c);
	}
	for(int i=1 ; i<=n ; i++) dist[i][i]=0;
	for(int k=1 ; k<=n ; k++){
		for(int i=1 ; i<=n ; i++){
			for(int j=1 ; j<=n ; j++){
				dist[i][j] = min(dist[i][j] , dist[i][k]+dist[k][j]);
			}
		}
	}
	for(int i=0 ; i<q ; i++){
		int a,b;
		cin>>a>>b;
		if(dist[a][b] == INF) cout<<"-1\n";
		else cout<<dist[a][b]<<'\n';
	}

	return;
}
 
signed main() {
    	ios_base::sync_with_stdio(0);
    	cin.tie(0);
    	cout.tie(0);
 
    	solve();
}
